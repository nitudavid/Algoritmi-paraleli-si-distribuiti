Am inceput prin a ma uita la pasii algoritmului. Pasul 0 nu se poate paraleliza deci
am inceput cu pasul unu: Rescale the image, si dupa ce l-am paralelizat am observat
ca este si de ajuns pentru a obtine punctajul de Scalabilitate si pe cel de Corectitudine,
asa ca am lasat doar aces pas paralelizat. Stiu ca nu este tocmai ideal, dar dupa incercari
esuate de a paraleliza si sample_grid si march the squares, am optat pentru varianta cea
mai simpla :)

ThreadData{
    Este structura pe care o folosesc pentru a da informatii thread-urilor.
    Am pus nume indeajuns de descriptive variabilelor pentru a se intelege ce e fiecare. 
}

rescale_image(){
    Este aceeasi idee ca in varianta secventiala dar cu modificarile de rigoare:
    Am pus argumentul si returnul void pentru a o putea apela in pthread_create fara probleme.
    Am castat argumentul generic arg la ThreadData pentru a putea accesa datele structurii. 
    Apoi am verificat daca imaginea exista deja, caz in care thread-ul nu trebuie sa faca nimic.
    Am calculat coloana de start si cea de end, si m-am asigurat sa nu trec de limita imaginii.
    Apoi am facut bicubic interpolation ca in vaianta secventiala, dar intre limitele calculate 
    mai devreme special pentru thread-ul curent.
}

main(){
    Singurele modificari apar la pasul 1.
    Conditia de alocare pentru imaginea noua este cea din rescale_image secvential, dar negata,
    pentru ca aici alocam memorie doar in conditiile astea, spre deosebire de rescale_image unde
    daca conditia e adevarata intoarcem imaginea primita.
    Apoi alocarea memoriei este identica cu cea din rescale_image.
    Am apoi un for in care pornes thread-urile si le spun cine e cine pentru imaginea primita.
    Dupa for-ul asta mai am unul in care dau join la toate thread-urile.
    Apoi creez imaginea finala(daca rescale a avut loc pointeaza la scaled_image a primului thread,
    daca nu la original_image tot a primului thread), si o dau mai departe celorlalte functii exact 
    ca in varianta secventiala.
}